#!/bin/bash

# BSD LICENSE
#
# Copyright 2017 NXP
# All rights reserved.
#
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of NXP nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#
# Author: Shengzhou Liu <shengzhou.liu@nxp.com>
#
# a utility to install custom Ubuntu/CentOS/Debian to SD/USB/SATA
# storage media online or offline
#


set -e

installer_version=v1.2
ubuntu_version=xenial_arm64
centos_arm64_version=7.2.1606
centos_ppc64_version=7.2.1511
debian_version=8
internal_img_svr=10.192.208.75
distrosurl=http://${internal_img_svr}/dash
release_ver=lsdk-1703

ARCH=`uname -m`
if [ ${ARCH} = "aarch64" ] ; then
    archname=arm64
elif [ ${ARCH} = "armv7l" ] ; then
    archname=arm32
elif [ ${ARCH} = "ppc64" ] ; then
    archname=ppc64
elif [ ${ARCH} = "ppc" ] ; then
    archname=powerpc
elif [ ${ARCH} = "x86_64" ] ; then
    archname=x86_64
fi


usage ()
{
cat <<EOF
Usage:  $0 option [argment] [option [argment]]
OPTION:
 -m, --media type      media type, e.g. sd, usb, sata, nor, qspi
 -d, --distro          distro name, e.g. ubuntu, centos, debian
 -i, --instruction     instruction to execute
 -n, --netinterface    network interface optionally, e.g. eth0
 -M, --machine         target machine, e.g. ls2088ardb
 -f, --firmware        firmware to be programmed into SD card or NOR flash
 -b, --bootpart        boot partition images to be programmed into SD card
 -r, --rootfs          distro rootfs images to be programmed into SD card
 -D, --device          device name of SD/USB/SATA disk in Linux
 -s, --startblock      start block number of SD card for programming firmware
 -h, --help            print help info

e.g.
    $0 --bootpart=build/images/bootpartition_arm64.d  --rootfs=build/images/xenial_arm64_rootfs.d \
       --firmware=build/images/firmware_ls1043ardb_sdboot_xxx.img --device=/dev/sdb
    $0 --bootpart=http://<web-server>/bootpartition_arm64.tgz --rootfs=http://<web-server>/xenial_arm64_rootfs.tgz \
       --firmware=http://<web-server>/firmware_ls1043ardb_sdboot_xxx.img --device=/dev/sdb
    $0 --firmare=firmware_ls1043ardb_sdboot_xxx.img --startblock=8       # program firmware to SD card
    $0 -m sd -d ubuntu -n eth0        # online install ubuntu to SD card
    $0 -m usb -d centos               # online install centos to USB disk
    $0 -m sata -d debian -n eth0      # online install debian to SATA disk
EOF
    exit $1
}

if [ -z "$1" -o "$1" = "--help" ] ; then
        usage
        exit 1
fi

# default
media_type=sd


ARGS=`getopt -a -o m:M:d:i:n:f:b:r:D:s:h -l machine:,meida:,distro:,instruction:,netinterface:,firmware:,bootpart:,rootfs:,device:,startblock:,help -- "$@"`
[ $? -ne 0 ] && usage
eval set -- "${ARGS}"
while true
do
        case "$1" in
        -m|--meida)
                media_type=$2
		echo "media type:$media_type"
                shift
                ;;
        -d|--distro)
                distro_type=$2
                echo "distro type: $distro_type"
                shift
                ;;
        -i|--instruction)
                instruction=$2
                echo "instruction: $instruction"
                shift
                ;;
        -M|--machine)
                machine=$2
                shift
                ;;
        -n|--netinterface)
                netinterface=$2
		online=true
                echo "netinterface: $netinterface"
                shift
                ;;
	-f|--firmware)
		firmware=$2
		shift
		;;
	-s|--startblock)
		startblock=$2
		echo startblock: $startblock
		shift
		;;
	-b|--bootpart)
		bootpart=$2
		shift
		;;
	-r|--rootfs)
		rootfs=$2
		echo "rootfs: $rootfs"
		shift
		;;
	-D|--device)
		mediadevice=$2
		echo "mediadevice: $mediadevice"
		shift
		;;
        -h|--help)
                usage
                ;;
        --)
                shift
                break
                ;;
        esac
shift
done



get_device_name_inside_installer() {
    if [ "$media_type" = "sd" ] ; then
        if [ ! -b /dev/mmcblk0 ] ; then
            echo "SD/MMC device not available"
            exit 1
        else
        disksize=$[ `fdisk -ls /dev/mmcblk0` / 1000000 ]
        if [ ${disksize} -ge 3 ] ; then
            echo "SD card: ${disksize} GB"
        else
            echo "the size of SD disk is too small: ${disksize}"
            exit 1
        fi
        devname=mmcblk0
        fi
    elif [ "$media_type" = "usb" ] ; then
        search_dev usb
        devname=${devusb}
        if [ -z "$devname" ] ; then
            echo "USB device not available"
            exit 1
        fi
    elif [ "$media_type" = "sata" ] ; then
        search_dev sata
        devname=${devsata}
        if [ -z "$devname" ] ; then
            echo "SATA device not available"
        exit 1
        fi
    fi


    if [ "$devname" = "mmcblk0" ] ; then
        devpartname=${devname}p
    else
        devpartname=${devname}
    fi
}


get_device_name_on_host() {
    devname=${mediadevice##*/}
    if [ "$devname" = "mmcblk0" ] ; then
        devpartname=${devname}p
    else
        devpartname=${devname}
    fi
}

if [ "$ARCH" = "x86_64" ] ; then
    get_device_name_on_host
fi

chkrfs=`echo $rootfs | grep -E http` || true
if [ -n "$chkrfs" ]; then
    online=true
    srcrfstype=http
fi
if [ -n "$rootfs" ] && [ -d $rootfs ]; then
    echo $rootfs dir found
    srcrfstype=dir
    online=false
elif [ -n "$rootfs" ] && [ -f $rootfs ] && [ echo $rootfs | grep -E *.tgz ]; then
    echo $rootfs tarball found
    srcrfstype=tgz
    online=false
fi


if [ -n "$distro_type" ]  ; then
  case $distro_type in
    ubuntu)
	if [ "$archname" = "ppc64" ] ; then
	    archname=powerpc
	fi
       distroimg=Ubuntu/$release_ver/${ubuntu_version}_rootfs.tgz
	;;
    centos)
	if [ "$archname" = "arm64" ] ; then
	    distroimg=CentOS/$release_ver/dash_centos_${centos_arm64_version}_${archname}_rootfs.cpio.gz
        elif [ "$archname" = "ppc64" ] ; then
	    distroimg=CentOS/$release_ver/dash_centos_${centos_ppc64_version}_${archname}_rootfs.cpio.gz
	fi
	;;
    debian)
	distroimg=Debian/$release_ver/dash_debian_${debian_version}_${archname}_rootfs.cpio.gz
	;;
    *)
        echo "unsupported distro: $distro_type"
        usage
        exit 1
	;;
  esac
  bootpartitiontarball=Dash-kernel/$release_ver/bootpartition_${archname}.tgz
fi

check_network() {
    if [ -n "$netinterface" ] ; then
        udhcpc -i $netinterface
    fi
    checkroute=`ping -c 1 $internal_img_svr | grep 'transmitted' | cut -d, -f1`
    if [ "$checkroute" != "1 packets transmitted" ] ; then
        echo "server is not reachable"
        echo "please configure network or specify correct network interface by -n"
        exit 1
    fi
}

search_dev() {
    devlist=`ls /dev/sd?`
    for dev in ${devlist}
    do
        sdx=`udevadm info -q all -n $dev | grep ID_BUS`
        disksize=$[ `fdisk -ls $dev` / 1000000 ]
        if [ $1 = "usb" ] ; then
            if [ ${sdx:10:4} = "usb" -a ${disksize} -ge 3 ] ; then
                devusb=${dev:5:3}
		echo "USB disk: ${devusb} ${disksize} GB"
		break
	    fi
	elif [ $1 = "sata" ] ; then
	    if [ ${sdx:10:4} = "ata" -a ${disksize} -ge 8 ] ; then
		devsata=${dev:5:3}
		echo "SATA disk: ${devsata} ${disksize} GB"
		break
	    fi
	fi
    done
}


umount_device() {
    mntnums=`cat /proc/mounts | grep ${devname} | wc -l`
    if [ $mntnums = 1 ] ; then
        umount $(cat /proc/mounts | grep  ${devname} | cut -d' ' -f1)
    else
        for (( i=1; i <= $mntnums; i++ ))
        do
            umount /dev/${devpartname}$i
        done
    fi
}


program_firmware_to_sd() {
    # $1: firmware file,  $2: startblock, $3: device
    if [ ! -b $3 ]; then
        echo device $device not found
        exit
    fi
    if [ ! -f $1 ]; then
        echo firmware $1 not found
        exit
    fi
    echo programming $1 into $3, startblock=$2
    dd if=$1 of=$3 bs=512 seek=$2
    echo $1 has been programmed into $3!
}


flex_install_distro() {
    if [ "$online" = "true" ]; then
        echo online = $online
        check_network
    fi

    if [ "$ARCH" != "x86_64" ] ; then
        get_device_name_inside_installer
    fi

    mntnums=`cat /proc/mounts | grep ${devname} | wc -l`
    if [ $mntnums = 1 ] ; then
        umount $(cat /proc/mounts | grep  ${devname} | cut -d' ' -f1) || true
    else
        for (( i=1; i <= $mntnums; i++ ))
        do
	    umount /dev/${devpartname}$i || true
        done
    fi
    
    echo "Partitioning /dev/${devname} ..."
    echo -e "o\nn\np\n1\n131072\n172032\na\n\nn\np\n2\n172033\n786433\nn\np\n3\n786434\n\nt\n1\nb\nw\n" | fdisk /dev/${devname}
    sync
    
    echo "Formatting partitions ..."
    if [ "$media_type" = "sd" ] ; then
        uuid1=c6dc39d1
        uuid2=6a681517b8d2
	uuid3=8c371d826bd3
    elif [ "$media_type" = "usb" ] ; then
        uuid1=c6dc39b1
        uuid2=6a681517b8b2
        uuid3=8c371d826bb3
    elif [ "$media_type" = "sata" ] ; then
        uuid1=c6dc39a1
        uuid2=6a681517b8a2
        uuid3=8c371d826ba3
    fi
    
    # install firmware
    if [ -n "$firmware" ] ; then
	umount_device
	if [ `echo $firmware | grep http` ]; then
	    wget $firmware || true
	    fwfile=`ls firmware*.img`|| true
	    program_firmware_to_sd $fwfile 8 /dev/$devname
        else
	    program_firmware_to_sd $firmware 8 /dev/$devname
	fi
    fi

    umount_device
    mkfs.vfat -n EFI -i ${uuid1} /dev/${devpartname}1

    umount_device
    mkfs.ext4 -v -b 4096 -L boot -U c6dc39a1-a7f2-4b75-b1a0-${uuid2} /dev/${devpartname}2
    mkfs.ext4 -v -O ^huge_file -b 4096 -L rootfs -U 865ee0da-5933-445c-b9d7-${uuid3} /dev/${devpartname}3

    if [ ! -d /run/media/${devpartname}2 ] ; then
        mkdir -p /run/media/${devpartname}2
    fi
    if [ ! -d /run/media/${devpartname}3 ] ; then
        mkdir -p /run/media/${devpartname}3
    fi
    
    mount /dev/${devpartname}2  /run/media/${devpartname}2
    mount /dev/${devpartname}3  /run/media/${devpartname}3

    # for offline install
    if [ "$srcrfstype" = "dir" -a "$online" != "true" ]; then
	echo "offline installing with dir, please wait ..."
	cp -rf $bootpart/* /run/media/${devpartname}2
        cp -rf $rootfs/* /run/media/${devpartname}3
    elif [ "$srcrfstype" = "tgz" -a "$online" != "true" ]; then
	echo "offline installing with tgz, please wait ..."
	tar xz $bootpart /run/media/${devpartname}2
	cd /run/media/${devpartname}2
	mv bootpartition_arm*.d/* .
	rm -rf bootpartition_arm*.d
	cd -
	echo installing rootfs, please wait ...
	tar xz $rootfs /run/media/${devpartname}3
	cd /run/media/${devpartname}3
	mv *rootfs.d/* . && rm -rf *rootfs.d
	cd -
    # for online install
    elif [ "$online" = "true" ]; then
	echo online install ...
        cd /run/media/${devpartname}2
	if [ ${ARCH} != "x86_64" -a -z "$rootfs" ]; then
	    # back compatible with existing LARS auto test on arm board
            wget ${distrosurl}/${bootpartitiontarball} -O /dev/stdout | tar xz
	elif [ $srcrfstype = http ]; then
	    wget $bootpart -O /dev/stdout | tar xz
	fi
        mv bootpartition_arm*.d/* . && rm -rf bootpartition_arm*.d

	cd /run/media/${devpartname}3
	if [ ${ARCH} != "x86_64" -a -z "$rootfs" ]; then
	    # back compatible with existing
	    wget ${distrosurl}/${distroimg} -O /dev/stdout | tar xz
	elif [ $srcrfstype = http ]; then
	    wget $rootfs -O /dev/stdout | tar xz
	fi
	mv *rootfs.d/* . && rm -rf *rootfs.d
    fi
    sync
    
    if [ "$media_type" = "usb" ] ; then
        sed -i 's/d826bd3/d826bb3/g' /run/media/${devpartname}3/etc/fstab
        sed -i 's/517b8d2/517b8b2/g' /run/media/${devpartname}3/etc/fstab
    elif [ "$media_type" = "sata" ] ; then
        sed -i 's/d826bd3/d826ba3/g' /run/media/${devpartname}3/etc/fstab
	sed -i 's/517b8d2/517b8a2/g' /run/media/${devpartname}3/etc/fstab
    fi
    sync
    echo "rootfs partition installing: finished"
    cd ~
    df -h
    blkid
    ckuuid=`grep 865ee0da /run/media/${devpartname}3/etc/fstab | cut -d'-' -f1`
    if [ "$ckuuid" = "UUID=865ee0da" ] ; then
        echo "$distro_type installation finished successfully"
    else
        echo "$distro_type installation failed"
    fi
}

if [ -n "$startblock" ]; then
    program_firmware_to_sd $firmware $startblock $mediadevice
else
    flex_install_distro
fi
